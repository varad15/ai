//o(b^d)

import java.util.*;

/**
 * 8‑Puzzle solver – Best‑First Search (Greedy)
 * -------------------------------------------
 * ‑ State with the lowest heuristic h(n) is always expanded next.
 * ‑ Uses Manhattan‑distance heuristic.
 * ‑ Keeps a visited set so a configuration is processed only once.
 */
public class EightPuzzleBestFirst {

    /* ---------- State (board configuration) ---------- */
    private static class State implements Comparable<State> {
        int[] board;          // 0..8, with 0 = blank
        int blankPos;         // index (0‑8) of the blank
        State parent;         // parent pointer for path recovery
        int h;                // heuristic value (Manhattan distance)

        State(int[] b, State p) {
            board     = b;
            parent    = p;
            blankPos  = findBlank(b);
            h         = manhattan(b);
        }

        /* Manhattan distance heuristic */
        private static int manhattan(int[] b) {
            int sum = 0;
            for (int i = 0; i < 9; i++) {
                int v = b[i];
                if (v == 0) continue;              // skip blank
                int goalR = (v - 1) / 3, goalC = (v - 1) % 3;
                int curR  = i / 3,      curC  = i % 3;
                sum += Math.abs(goalR - curR) + Math.abs(goalC - curC);
            }
            return sum;
        }

        private static int findBlank(int[] b) {
            for (int i = 0; i < 9; i++) if (b[i] == 0) return i;
            throw new IllegalStateException("No blank!");
        }

        /* For PriorityQueue ordering (min‑heap by h) */
        @Override public int compareTo(State o) { return Integer.compare(this.h, o.h); }

        /* String key “123456780” for visited‑set */
        String key() {
            StringBuilder sb = new StringBuilder(9);
            for (int v : board) sb.append(v);
            return sb.toString();
        }
    }

    /* ---------- Best‑First Search ---------- */
    public static void bestFirst(int[] startBoard) {
        PriorityQueue<State> frontier = new PriorityQueue<>();
        Set<String> visited           = new HashSet<>();

        State start = new State(startBoard, null);
        frontier.add(start);
        visited.add(start.key());

        while (!frontier.isEmpty()) {
            State cur = frontier.poll();
            if (cur.h == 0) {                 // heuristic 0 ⇒ goal reached
                printSolution(cur);
                return;
            }
            for (State nxt : expand(cur)) {
                if (visited.add(nxt.key())) { // only enqueue unseen states
                    frontier.add(nxt);
                }
            }
        }
        System.out.println("No solution (puzzle is unsolvable).");
    }

    /* Generate neighbours by sliding blank U/D/L/R when legal */
    private static List<State> expand(State s) {
        List<State> list = new ArrayList<>();
        int r = s.blankPos / 3, c = s.blankPos % 3;
        int[][] moves = { {r-1, c}, {r+1, c}, {r, c-1}, {r, c+1} }; // Up,Down,Left,Right

        for (int[] m : moves) {
            int nr = m[0], nc = m[1];
            if (nr < 0 || nr > 2 || nc < 0 || nc > 2) continue;     // outside board
            int newPos = nr * 3 + nc;
            int[] newBoard = s.board.clone();
            newBoard[s.blankPos] = newBoard[newPos]; // swap blank with neighbour
            newBoard[newPos]     = 0;
            list.add(new State(newBoard, s));
        }
        return list;
    }

    /* Walk back via parents, then print path */
    private static void printSolution(State goal) {
        List<State> path = new ArrayList<>();
        for (State s = goal; s != null; s = s.parent) path.add(s);
        Collections.reverse(path);

        System.out.println("Solved in " + (path.size() - 1) + " moves:\n");
        for (State s : path) printBoard(s.board);
    }

    private static void printBoard(int[] b) {
        for (int i = 0; i < 9; i++) {
            System.out.print(b[i] == 0 ? "  " : b[i] + " ");
            if (i % 3 == 2) System.out.println();
        }
        System.out.println("-------");
    }

    /* -------------------- main ----------------------- */
    public static void main(String[] args) {
        // Example start configuration (0 = blank)
        int[] start = {2, 8, 3,
                       1, 5, 4,
                       7, 0, 6};

        bestFirst(start);
    }
}
