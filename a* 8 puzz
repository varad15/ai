import java.util.*;

/**
 * Solve the 8‑puzzle with A* search (Manhattan‑distance heuristic).
 *
 * ┌───┐          Goal configuration
 * │1 2 3│         1 2 3
 * │4 5 6│   --->  4 5 6
 * │7 8 _│         7 8 _
 *
 * 0 = blank tile
 */
public class EightPuzzleAStar {

    /* ───────────────────── State representation ─────────────────────── */

    private static final class State implements Comparable<State> {
        int[][] board;          // 3×3 array holding tile numbers
        int blankX, blankY;     // coordinates of the blank
        int g;                  // cost so far  (#moves from start)
        int h;                  // heuristic    (Manhattan dist)
        String path;            // sequence of moves “UDLR”
        State(int[][] b, int x, int y, int g, String p) {
            board   = b;
            blankX  = x;
            blankY  = y;
            this.g  = g;
            path    = p;
            h = manhattan();    // compute heuristic once
        }

        /** Manhattan distance of every tile from its goal square. */
        private int manhattan() {
            int dist = 0;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++) {
                    int val = board[i][j];
                    if (val != 0) {
                        int goalX = (val - 1) / 3;
                        int goalY = (val - 1) % 3;
                        dist += Math.abs(i - goalX) + Math.abs(j - goalY);
                    }
                }
            return dist;
        }

        /** Needed by PriorityQueue (min‑heap on f = g + h). */
        @Override public int compareTo(State other) {
            return (g + h) - (other.g + other.h);
        }

        /** Are we at the goal configuration? */
        boolean isGoal() { return h == 0; }

        /** Serialize board into a string key e.g. "123405678" for visited‑set. */
        String key() {
            StringBuilder sb = new StringBuilder(9);
            for (int[] row : board)
                for (int v : row) sb.append(v);
            return sb.toString();
        }
    }

    /* ────────────────────────── A* Search ───────────────────────────── */

    // Moves: Up, Down, Left, Right
    private static final int[] DX = {-1, 1, 0, 0};
    private static final int[] DY = { 0, 0,-1, 1};
    private static final char[] MV = {'U','D','L','R'};

    public static void solve(int[][] startBoard) {

        // locate blank (0)
        int sx = 0, sy = 0;
        outer:
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (startBoard[i][j] == 0) { sx = i; sy = j; break outer; }

        // frontier ordered by f = g + h
        PriorityQueue<State> pq = new PriorityQueue<>();
        // closed‑set to prevent re‑expansion
        Set<String> visited = new HashSet<>();

        pq.add(new State(cloneBoard(startBoard), sx, sy, 0, ""));

        while (!pq.isEmpty()) {
            State cur = pq.poll();
            if (!visited.add(cur.key())) continue; // already processed

            if (cur.isGoal()) {
                System.out.println("Solved in " + cur.g + " moves: " + cur.path);
                return;
            }

            // expand neighbours
            for (int d = 0; d < 4; d++) {
                int nx = cur.blankX + DX[d];
                int ny = cur.blankY + DY[d];
                if (nx < 0 || nx > 2 || ny < 0 || ny > 2) continue; // off board

                int[][] nextBoard = cloneBoard(cur.board);
                // swap blank with adjacent tile
                nextBoard[cur.blankX][cur.blankY] = nextBoard[nx][ny];
                nextBoard[nx][ny] = 0;

                State next = new State(nextBoard, nx, ny,
                                       cur.g + 1,
                                       cur.path + MV[d]);
                if (!visited.contains(next.key())) pq.add(next);
            }
        }
        System.out.println("Unsolvable puzzle.");
    }

    /* Helper: deep‑copy 3×3 array */
    private static int[][] cloneBoard(int[][] src) {
        int[][] copy = new int[3][3];
        for (int i = 0; i < 3; i++) System.arraycopy(src[i], 0, copy[i], 0, 3);
        return copy;
    }

    /* ──────────────────────────── main ──────────────────────────────── */

    public static void main(String[] args) {
        // Example start configuration (solvable)
        int[][] start = {
            {1, 2, 3},
            {4, 0, 6},
            {7, 5, 8}
        };

        solve(start);
    }
}
