//O(9!)
import java.util.Scanner;

public class TicTacToeMinimax {

    // ────────── Board ──────────
    private static final char[][] board = {
        {' ', ' ', ' '},
        {' ', ' ', ' '},
        {' ', ' ', ' '}
    };

    // ────────── I/O helpers ──────────
    private static void printBoard() {
        System.out.println();
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print("|" + cell);
            }
            System.out.println("|");
        }
        System.out.println();
    }

    // ────────── Game‑state tests ──────────
    private static boolean isWinning(char p) {
        for (int i = 0; i < 3; i++)
            if ((board[i][0] == p && board[i][1] == p && board[i][2] == p) ||   // row
                (board[0][i] == p && board[1][i] == p && board[2][i] == p))     // col
                return true;

        return (board[0][0] == p && board[1][1] == p && board[2][2] == p) ||    // diag
               (board[0][2] == p && board[1][1] == p && board[2][0] == p);      // anti‑diag
    }

    private static boolean isFull() {
        for (char[] row : board)
            for (char cell : row)
                if (cell == ' ') return false;
        return true;
    }

    // ────────── Minimax (no αβ for clarity) ──────────
    private static int minimax(boolean isMax) {
        if (isWinning('O')) return  1;   // AI wins
        if (isWinning('X')) return -1;   // human wins
        if (isFull())       return  0;   // draw

        int best = isMax ? -10 : 10;

        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (board[r][c] == ' ') {
                    board[r][c] = isMax ? 'O' : 'X';
                    int val = minimax(!isMax);
                    board[r][c] = ' ';
                    best = isMax ? Math.max(best, val) : Math.min(best, val);
                }
            }
        }
        return best;
    }

    private static void makeBestMove() {
        int bestScore = -10, bestR = -1, bestC = -1;

        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (board[r][c] == ' ') {
                    board[r][c] = 'O';
                    int score = minimax(false);
                    board[r][c] = ' ';
                    if (score > bestScore) {
                        bestScore = score;
                        bestR = r;
                        bestC = c;
                    }
                }
            }
        }
        board[bestR][bestC] = 'O';
    }

    // ────────── Main game loop ──────────
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Tic‑Tac‑Toe (You = X, AI = O)");
        printBoard();

        while (true) {

            // ----- Human move -----
            int row, col;
            while (true) {
                System.out.print("Enter your move (row col 0‑2): ");
                row = sc.nextInt();
                col = sc.nextInt();
                if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ')
                    break;
                System.out.println("Invalid move. Try again.");
            }
            board[row][col] = 'X';
            printBoard();
            if (isWinning('X')) { System.out.println("You win!"); break; }
            if (isFull())       { System.out.println("Draw!");    break; }

            // ----- AI move -----
            makeBestMove();
            System.out.println("AI move:");
            printBoard();
            if (isWinning('O')) { System.out.println("AI wins!"); break; }
            if (isFull())       { System.out.println("Draw!");    break; }
        }
        sc.close();
    }
}
