//O(1) time per move
import java.util.*;

public class TicTacToeMagic {

    // magic‑square numbers in board order
    private static final int[][] MAGIC = {
        {8, 1, 6},
        {3, 5, 7},
        {4, 9, 2}
    };

    private static final char[][] board = {
        {' ', ' ', ' '},
        {' ', ' ', ' '},
        {' ', ' ', ' '}
    };

    private static final List<Integer> playerNums = new ArrayList<>();
    private static final List<Integer> aiNums     = new ArrayList<>();

    private static final Scanner sc = new Scanner(System.in);

    // ────────── Helpers ──────────
    private static void printBoard() {
        System.out.println();
        for (char[] row : board) {
            for (char c : row) System.out.print("|" + c);
            System.out.println("|");
        }
        System.out.println();
    }

    private static boolean isWinning(List<Integer> nums) {
        int n = nums.size();
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++)
                for (int k = j + 1; k < n; k++)
                    if (nums.get(i) + nums.get(j) + nums.get(k) == 15)
                        return true;
        return false;
    }

    private static boolean boardFull() {
        for (char[] row : board)
            for (char c : row)
                if (c == ' ') return false;
        return true;
    }

    // ────────── AI move using magic square logic ──────────
    private static void aiMove() {
        // 1. Can AI win?
        Integer move = findWinningMove(aiNums);
        // 2. Else block player
        if (move == null) move = findWinningMove(playerNums);
        // 3. Else take center, corner, side (in that order)
        if (move == null && board[1][1] == ' ') move = 5;
        if (move == null) move = pickAvailable(Arrays.asList(8,6,2,4));
        if (move == null) move = pickAvailable(Arrays.asList(1,3,7,9));

        placeNumber(move, 'O', aiNums);
        System.out.println("AI plays " + move);
    }

    private static Integer findWinningMove(List<Integer> nums) {
        for (int n1 : nums)
            for (int n2 : nums)
                if (n1 != n2) {
                    int needed = 15 - n1 - n2;
                    if (needed >= 1 && needed <= 9 &&
                        !playerNums.contains(needed) &&
                        !aiNums.contains(needed))
                        return needed;
                }
        return null;
    }

    private static Integer pickAvailable(List<Integer> pref) {
        for (int n : pref)
            if (!playerNums.contains(n) && !aiNums.contains(n))
                return n;
        return null;
    }

    private static void placeNumber(int num, char mark, List<Integer> list) {
        outer:
        for (int r = 0; r < 3; r++)
            for (int c = 0; c < 3; c++)
                if (MAGIC[r][c] == num) {
                    board[r][c] = mark;
                    list.add(num);
                    break outer;
                }
    }

    // ────────── Main loop ──────────
    public static void main(String[] args) {

        System.out.println("Tic‑Tac‑Toe with Magic‑Square AI (You=X, AI=O)");
        printBoard();

        while (true) {
            // ----- Human -----
            int row, col;
            while (true) {
                System.out.print("Enter row col (0‑2): ");
                row = sc.nextInt(); col = sc.nextInt();
                if (row>=0 && row<3 && col>=0 && col<3 && board[row][col]==' ')
                    break;
                System.out.println("Bad move, try again.");
            }
            board[row][col] = 'X';
            playerNums.add(MAGIC[row][col]);
            printBoard();
            if (isWinning(playerNums)) { System.out.println("You win!"); break; }
            if (boardFull())            { System.out.println("Draw!");    break; }

            // ----- AI -----
            aiMove();
            printBoard();
            if (isWinning(aiNums)) { System.out.println("AI wins!"); break; }
            if (boardFull())       { System.out.println("Draw!");    break; }
        }
        sc.close();
    }
}
